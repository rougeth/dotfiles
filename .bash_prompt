#!/bin/bash

# Check that terminfo exists before changing TERM var to xterm-256color
# Prevents prompt flashing in Mac OS X 10.6 Terminal.app
if [ -e /usr/share/terminfo/x/xterm-256color ]; then
    export TERM='xterm-256color'
fi

# Reset
reset="\e[0m"

# Regular colors
grey="\e[0;30m"
red="\e[0;31m"
green="\e[0;32m"
yellow="\e[0;33m"
blue="\e[0;34m"
purple="\e[0;35m"
cyan="\e[0;36m"
white="\e[0;37m"

# Bold
bold_grey="\e[1;30m"
bold_red="\e[1;31m"
bold_green="\e[1;32m"
bold_yellow="\e[1;33m"
bold_blue="\e[1;34m"
bold_purple="\e[1;35m"
bold_cyan="\e[1;36m"
bold_white="\e[1;37m"

user="${red}\u"
host="${blue}\h"
path="${white}\W"

if [[ "$SSH_TTY" ]]; then
    # connected via ssh
    host="${bold_red}\h"
elif [[ "$USER" == "root" ]]; then
    # logged in as root
    host="${bold_red}\h"
fi

is_git_repo() {
    $(git rev-parse --is-inside-work-tree &> /dev/null)
}

is_git_dir() {
    $(git rev-parse --is-inside-git-dir 2> /dev/null)
}

get_git_branch() {
    local branch_name

    # Get the short symbolic ref
    branch_name=$(git symbolic-ref --quiet --short HEAD 2> /dev/null) ||
    # If HEAD isn't a symbolic ref, get the short SHA
    branch_name=$(git rev-parse --short HEAD 2> /dev/null) ||
    # Otherwise, just give up
    branch_name="(unknown)"

    printf $branch_name
}

# Git status information
prompt_git() {
    local git_info git_state uc us ut st

    if ! is_git_repo || is_git_dir; then
        return 1
    fi

    git_info="[$(get_git_branch)]"

    # Check for uncommitted changes in the index
    if ! $(git diff --quiet --ignore-submodules --cached); then
        uc="${bold_green}+"
    fi

    # Check for unstaged changes
    if ! $(git diff-files --quiet --ignore-submodules --); then
        us="${bold_red}!"
    fi

    # Check for untracked files
    if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        ut="${bold_yellow}?"
    fi

    # Check for stashed files
    if $(git rev-parse --verify refs/stash &>/dev/null); then
        st="$"
    fi

    git_state=$uc$us$ut$st

    # Combine the branch name and state information
    if [[ $git_state ]]; then
        git_info="$git_info $git_state"
    fi

    printf "${git_info}${reset}"
}


# Set the terminal title to the current working directory
PS1="\[\033]0;\w\007\]"

# Build the prompt
PS1+="${user}" # Username
PS1+=" "
PS1+="${host}" # Host
PS1+=" "
PS1+="${path}" # Working directory
PS1+=" "
PS1+="\$(prompt_git)" # Git details
PS1+="${reset}"
PS1+="\n$ " # Newline
